####################################################
# LSrouter.py
# Name:
# HUID:
#####################################################

from router import Router
from packet import Packet
import json
import heapq

class LSrouter(Router):
    """Link state routing protocol implementation.

    Add your own class fields and initialization code (e.g. to create forwarding table
    data structures). See the `Router` base class for docstrings of the methods to
    override.
    """

    def __init__(self, addr, heartbeat_time):
        Router.__init__(self, addr)  # Initialize base class - DO NOT REMOVE
        self.heartbeat_time = heartbeat_time
        self.last_time = 0
        # TODO
        #   add your own class fields and initialization code here
        self.lsdb = {}  # full network topology
        self.sequence_numbers = {}  # node -> latest seq number
        self.neighbors = {}  # port -> (neighbor, cost)
        self.my_links = {}   # neighbor -> cost
        self.forwarding_table = {}  # destination -> port
        self.seq = 0
        # pass

    def handle_packet(self, port, packet):
        """Process incoming packet."""
        # TODO
        if packet.is_traceroute:
            # Hint: this is a normal data packet
            # If the forwarding table contains packet.dst_addr
            #   send packet based on forwarding table, e.g., self.send(port, packet)
            dst = packet.dst_addr
            if dst in self.forwarding_table:
                out_port = self.forwarding_table[dst]
                self.send(out_port, packet)
            # pass
        else:
            # Hint: this is a routing packet generated by your routing protocol
            # If the sequence number is higher and the received link state is different
            #   update the local copy of the link state
            #   update the forwarding table
            #   broadcast the packet to other neighbors
            try:
                data = json.loads(packet.content)
                origin = packet.src_addr
                seq_num = data['seq']
                links = data['links'] 
            except:
                return
            
            if origin not in self.sequence_numbers or seq_num > self.sequence_numbers[origin]:
                self.sequence_numbers[origin] = seq_num
                self.lsdb[origin] = links
                self.compute_paths()
                self.flood(packet, in_port=port)
            # pass

    def handle_new_link(self, port, endpoint, cost):
        """Handle new link."""
        # TODO
        #   update local data structures and forwarding table
        #   broadcast the new link state of this router to all neighbors
        self.neighbors[port] = (endpoint, cost)
        self.my_links[endpoint] = cost
        self.broadcast_link_state()
        # pass

    def handle_remove_link(self, port):
        """Handle removed link."""
        # TODO
        #   update local data structures and forwarding table
        #   broadcast the new link state of this router to all neighbors
        if port in self.neighbors:
            endpoint, _ = self.neighbors.pop(port)
            self.my_links.pop(endpoint, None)
            self.broadcast_link_state()
        # pass

    def handle_time(self, time_ms):
        """Handle current time."""
        if time_ms - self.last_time >= self.heartbeat_time:
            self.last_time = time_ms
            # TODO
            #   broadcast the link state of this router to all neighbors
            self.broadcast_link_state()
            # pass

    def broadcast_link_state(self):
        self.seq += 1
        data = json.dumps({"seq": self.seq, "links": self.my_links})
        for port, (neighbor, _) in self.neighbors.items():
            pkt = Packet(Packet.ROUTING, self.addr, neighbor, data)
            self.send(port, pkt)

        self.sequence_numbers[self.addr] = self.seq
        self.lsdb[self.addr] = self.my_links.copy()
        self.compute_paths()

    def flood(self, packet, in_port):
        for port, (neighbor, _) in self.neighbors.items():
            if port != in_port:
                self.send(port, packet)

    def compute_paths(self):
        dist = {self.addr: 0}
        prev = {}
        visited = set()
        heap = [(0, self.addr)]

        while heap:
            cost, node = heapq.heappop(heap)
            if node in visited:
                continue
            visited.add(node)

            neighbors = self.lsdb.get(node, {})
            for neighbor, link_cost in neighbors.items():
                new_cost = cost + link_cost
                if neighbor not in dist or new_cost < dist[neighbor]:
                    dist[neighbor] = new_cost
                    prev[neighbor] = node
                    heapq.heappush(heap, (new_cost, neighbor))

        self.forwarding_table = {}
        for dest in dist:
            if dest == self.addr:
                continue
            curr = dest
            while prev[curr] != self.addr:
                curr = prev[curr]
            for port, (neighbor, _) in self.neighbors.items():
                if neighbor == curr:
                    self.forwarding_table[dest] = port
                    break

    def __repr__(self):
        """Representation for debugging in the network visualizer."""
        # TODO
        #   NOTE This method is for your own convenience and will not be graded
        return f"LSrouter(addr={self.addr})"
